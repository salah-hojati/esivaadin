package com.example.application.service;

import com.example.application.entity.Entity;
import com.example.application.entity.Project;
import com.example.application.service.generator.BuildFileGenerator;
import com.example.application.service.generator.EntityClassGenerator;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 * Orchestrates the project generation process by coordinating specialized generator components.
 */
@Service
public class CodeGeneratorService {

    private final Map<String, BuildFileGenerator> buildFileGenerators;
    private final EntityClassGenerator entityClassGenerator;

    /**
     * Injects all specialized generator components.
     * Spring automatically populates the map with all beans that implement BuildFileGenerator,
     * using their bean names ("Maven", "Gradle") as keys.
     */
    public CodeGeneratorService(Map<String, BuildFileGenerator> buildFileGenerators,
                                EntityClassGenerator entityClassGenerator) {
        this.buildFileGenerators = buildFileGenerators;
        this.entityClassGenerator = entityClassGenerator;
    }

    /**
     * Generates all project files by delegating to the appropriate generators.
     * @param project The project metadata.
     * @param entities The list of entities for the project.
     * @return A map where the key is the full file path and the value is the file content.
     */
    public Map<String, String> generateProjectFiles(Project project, List<Entity> entities) {
        Map<String, String> projectFiles = new HashMap<>();

        // 1. Dynamically select and use the correct build file generator from the map.
        BuildFileGenerator buildFileGenerator = buildFileGenerators.get(project.getBuildTool());
        if (buildFileGenerator != null) {
            String content = buildFileGenerator.generate(project);
            String fileName = buildFileGenerator.getFileName();
            projectFiles.put(project.getName() + "/" + fileName, content);
        }

        // 2. Delegate entity class generation.
        String sourcePath = project.getName() + "/src/main/java/com/example/domain/";
        for (Entity entity : entities) {
            String classContent = entityClassGenerator.generate(entity, entities);
            projectFiles.put(sourcePath + entity.getName() + ".java", classContent);
        }

        return projectFiles;
    }

    /**
     * Zips the files generated by the generateProjectFiles method.
     */
    public byte[] generateAndZipProject(Project project, List<Entity> entities) throws IOException {
        Map<String, String> projectFiles = generateProjectFiles(project, entities);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (ZipOutputStream zos = new ZipOutputStream(baos)) {
            for (Map.Entry<String, String> fileEntry : projectFiles.entrySet()) {
                ZipEntry zipEntry = new ZipEntry(fileEntry.getKey());
                zos.putNextEntry(zipEntry);
                zos.write(fileEntry.getValue().getBytes());
                zos.closeEntry();
            }
        }
        return baos.toByteArray();
    }
}